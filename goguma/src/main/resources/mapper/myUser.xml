<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.store.goguma.repository.MyUserRepository">

	<!-- 유저 결제 내역 -->
	<select id="findEmojiHistoryByUser" resultType="com.store.goguma.user.dto.my.UserEmojiDTO">
		SELECT me.id, me.`name`, me.`file` , eh.* 
			FROM `emoji_history` AS eh
			JOIN `main_emoji` AS me 
			ON eh.main_emoji_id = me.id
		where `u_id`=#{uId}
		ORDER BY eh.create_at DESC
		LIMIT #{start},10
	</select>
	
	<!-- 유저 결제 내역 갯수 -->
	<select id="countEmojiHistoryByUser">
        SELECT COUNT(*) FROM `emoji_history`
        where `u_id`=#{uId}
    </select>
	
	<select id="findEmojiHistoryBymerchantId" resultType="com.store.goguma.user.dto.my.UserEmojiDTO">
		SELECT me.id, me.`name`, me.`file` , eh.* 
			FROM `emoji_history` AS eh
			JOIN `main_emoji` AS me 
			ON eh.main_emoji_id = me.id
		where `merchant_id`=#{merchantId}
	</select>
	
	<update id="updateEmojiHistoryCancel">
		update `emoji_history` set 
			`cancel_amount`=`price`,
			`cancel_yn`='Y', 
			`update_at`=NOW()
		where `merchant_id`=#{merchantId}
			and create_at &lt;= DATE_ADD(DATE(NOW()), INTERVAL 3 DAY)
	</update>
	
	<!-- 중고거래 구매 내역 -->
	<select id="myReadByproducthistory" resultType="com.store.goguma.user.dto.my.ProductHistoryDTO">
		SELECT ph.*, 
			p.address AS productAddress, 
			p.host_id AS productHostId,
			p.main_category_id AS productMainCategoryId, 
			p.sub_category_id AS productSubCategoryId,
			p.price AS productPrice, 
			p.file AS productFile,
			p.`name` as `prodName`,
			u.`name` as `userName`
		FROM `product_history` AS ph
			JOIN  `product` AS p ON ph.p_id = p.p_id
			JOIN `user` AS u ON p.host_id = u.u_id
		WHERE ph.`u_id`=#{uId}
		ORDER BY ph.id DESC
		LIMIT #{start},10
	</select>
	
	<!-- 중고거래 구매 내역 갯수 -->
	<select id="countProductHistoryByUser">
		SELECT COUNT(*) FROM `product_history` as ph
		JOIN  `product` AS p ON ph.p_id = p.p_id
        	where `u_id`=#{uId}
	</select>
	
	<!-- 문의하기 내역 -->
	<select id="findQnaByUid" resultType="com.store.goguma.user.dto.my.QnaUserDTO">
		SELECT q.*,
		cu.`name` AS userName,
		au.`name` AS adminName
			FROM `qna` AS q
			JOIN `user` AS cu ON q.u_id = cu.u_id <!-- 회원 정보 -->
			LEFT JOIN `user` AS au ON q.admin_id = au.u_id <!-- 관리자 정보 -->
		WHERE q.u_id =#{uId}
		<include refid="searchBox"/>
		ORDER BY q.id DESC
		LIMIT #{start},10
	</select>
	
	
	
	<!-- 문의하기 내역 갯수 -->
	<select id="countQnaByUid">
		SELECT COUNT(*) FROM `qna`
        	where `u_id`=#{uId}
        	<include refid="searchBox"/>
	</select>
	
	<!-- 검색 쿼리 -->
	<sql id="searchBox">
		<choose>
			<when test="searchType == 'titleOrContent'">
				AND title LIKE CONCAT('%', #{search}, '%') OR content LIKE CONCAT('%', #{search}, '%')
			</when>
			<when test="searchType == 'title'">
				AND title LIKE CONCAT('%', #{search}, '%')
			</when>
			<when test="searchType == 'content'">
				AND content LIKE CONCAT('%', #{search}, '%')
			</when>
		</choose>
	</sql>
	
	<!-- 
	<update id="updateDeleteByQnaId">
		update `qna` set 
			``=#{}, 
			`delete_yn`='Y', 
			`delete_at`=NOW() 
		where `id`=#{id}
	</update>
	 -->
</mapper>